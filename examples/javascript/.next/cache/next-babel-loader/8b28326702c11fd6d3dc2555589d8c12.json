{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jason/repos/cryptography/examples/javascript/pages/index.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// index.jsx\nimport React from \"react\";\nexport var __N_SSP = true;\nexport default function index(props) {\n  var paragraphStyle = {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    fontSize: \"1em\",\n    fontWeight: \"normal\",\n    margin: \".41em 0\",\n    textAlign: \"left\"\n  };\n  var containerStyle = {\n    wordWrap: \"break-word\",\n    textAlign: \"center\",\n    margin: \"5em 5em 5em 5em\",\n    padding: \"2em 6em \",\n    backgroundColor: \"#e9e9e9\",\n    flexWrap: \"true\"\n  };\n  var imgStyle = {\n    padding: \"3rem 0\",\n    width: \"100%\"\n  };\n\n  var isEqual = function isEqual() {\n    var BLOCK_SIZE = 16;\n    return (props === null || props === void 0 ? void 0 : props.result.slice(BLOCK_SIZE).trim()) === props.plaintext;\n  };\n\n  function DisplayImage() {\n    return isEqual() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/crypto_example_Pi-unrolled-720.gif\",\n        style: imgStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          style: {\n            textDecoration: \"italic\"\n          },\n          children: [\"Seeing a sweet short film about \", \"\\u03C0\", \"? It worked! Otherwise you would be presented with a glorious failure message.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: paragraphStyle,\n      children: \"Not equal \".concat(isEqual())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n  function BoundChars(props) {\n    var text = props.text;\n    var result, supremum;\n    var displayArray = [];\n    var count = (props === null || props === void 0 ? void 0 : props.characters) ? props.characters : 40;\n\n    for (var i = 0; i < text.length; i += count) {\n      supremum = i + count;\n      result = supremum > text.length ? text.slice(i) : text.slice(i, supremum);\n      displayArray.push( /*#__PURE__*/_jsxDEV(\"p\", {\n        style: _objectSpread(_objectSpread({\n          backgroundColor: \"#000000\"\n        }, paragraphStyle), {}, {\n          margin: \"0\",\n          padding: \".41rem 0\",\n          justifyContent: \"space-around\"\n        }),\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          style: {\n            color: \"#999999\",\n            backgroundColor: \"#000000\"\n          },\n          children: result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        backgroundColor: \"black\"\n      },\n      id: \"encrypted-token-display-chunks\",\n      children: displayArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: containerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: \"2em\"\n        },\n        children: [\" \", \"Encryption between node.js and Python.\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: paragraphStyle,\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Data to encrypt: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: paragraphStyle,\n        children: \"\".concat(props.plaintext)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: paragraphStyle,\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Encrypted result: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BoundChars, {\n        text: props === null || props === void 0 ? void 0 : props.encrypted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: paragraphStyle,\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Backend unencrypted result: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: paragraphStyle,\n        children: \"\".concat(props === null || props === void 0 ? void 0 : props.result.slice(16))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DisplayImage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/home/jason/repos/cryptography/examples/javascript/pages/index.jsx"],"names":["React","index","props","paragraphStyle","display","flexWrap","fontSize","fontWeight","margin","textAlign","containerStyle","wordWrap","padding","backgroundColor","imgStyle","width","isEqual","BLOCK_SIZE","result","slice","trim","plaintext","DisplayImage","textDecoration","BoundChars","text","supremum","displayArray","count","characters","i","length","push","justifyContent","color","encrypted"],"mappings":"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","sourcesContent":["// index.jsx\n\nimport React from \"react\";\nimport { encrypt, createBytesKey } from \"../../../src/javascript/mfcrypt\";\n\nexport default function index(props) {\n  const paragraphStyle = {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    fontSize: \"1em\",\n    fontWeight: \"normal\",\n    margin: \".41em 0\",\n    textAlign: \"left\",\n  };\n  const containerStyle = {\n    wordWrap: \"break-word\",\n    textAlign: \"center\",\n    margin: \"5em 5em 5em 5em\",\n    padding: \"2em 6em \",\n    backgroundColor: \"#e9e9e9\",\n    flexWrap: \"true\",\n  };\n  const imgStyle = {\n    padding: \"3rem 0\",\n    width: \"100%\",\n  };\n  const isEqual = () => {\n    const BLOCK_SIZE = 16;\n    return props?.result.slice(BLOCK_SIZE).trim() === props.plaintext;\n  };\n  function DisplayImage() {\n    return isEqual() ? (\n      <>\n        <img\n          src=\"/images/crypto_example_Pi-unrolled-720.gif\"\n          style={imgStyle}\n        />\n        <span>\n          <small style={{ textDecoration: \"italic\" }}>\n            Seeing a sweet short film about {`\\u03C0`}? It worked! Otherwise you\n            would be presented with a glorious failure message.\n          </small>\n        </span>\n      </>\n    ) : (\n      <p style={paragraphStyle}>{`Not equal ${isEqual()}`}</p>\n    );\n  }\n  function BoundChars(props) {\n    const { text } = props;\n    let result, supremum;\n    let displayArray = [];\n    const count = props?.characters ? props.characters : 40;\n    for (let i = 0; i < text.length; i += count) {\n      supremum = i + count;\n      result = supremum > text.length ? text.slice(i) : text.slice(i, supremum);\n      displayArray.push(\n        <p\n          style={{\n            backgroundColor: \"#000000\",\n            ...paragraphStyle,\n            margin: \"0\",\n            padding: \".41rem 0\",\n            justifyContent: \"space-around\",\n          }}\n          key={i}\n        >\n          <code style={{ color: \"#999999\", backgroundColor: \"#000000\" }}>\n            {result}\n          </code>\n        </p>\n      );\n    }\n    return (\n      <span\n        style={{ backgroundColor: \"black\" }}\n        id=\"encrypted-token-display-chunks\"\n      >\n        {displayArray}\n      </span>\n    );\n  }\n  return (\n    <>\n      <div style={containerStyle}>\n        <h1 style={{ fontSize: \"2em\" }}>\n          {\" \"}\n          Encryption between node.js and Python.{\" \"}\n        </h1>\n        <p style={paragraphStyle}>\n          <strong>{`Data to encrypt: `}</strong>\n        </p>\n        <p style={paragraphStyle}>{`${props.plaintext}`}</p>\n        <p style={paragraphStyle}>\n          <strong>{`Encrypted result: `}</strong>\n        </p>\n        <BoundChars text={props?.encrypted} />\n        <p style={paragraphStyle}>\n          <strong>{`Backend unencrypted result: `}</strong>\n        </p>\n        <p style={paragraphStyle}>{`${props?.result.slice(16)}`}</p>\n        <DisplayImage />\n      </div>\n    </>\n  );\n}\n\nexport async function getServerSideProps() {\n  const baseUrl = \"http://localhost:8080\";\n  const passphrase = \"a randomly generated string hash\";\n  const salt = \"salt\";\n  const plaintext =\n    \"ome type of secret. Trump fumbled COVID. Shhh! No one should know this. TOP SECRET!\";\n  const binKey = await createBytesKey(passphrase, salt);\n  const encrypted = await encrypt(plaintext, binKey);\n  const res = await fetch(`${baseUrl}/decrypt?data=${encrypted}`, {\n    method: \"POST\",\n  });\n  let result = null;\n  if (res.ok) {\n    result = await res.text();\n  }\n  return {\n    props: {\n      plaintext: plaintext,\n      encrypted: encrypted,\n      result: result || undefined,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}