"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.createBytesKey=createBytesKey;exports.encrypt=encrypt;exports.decrypt=decrypt;exports.addSignature=addSignature;exports.checkSignature=checkSignature;var _cryptoJs=_interopRequireDefault(require("crypto-js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}async function encrypt(data,passphrase,salt){const secretKeyBytes=await createBytesKey(passphrase,salt);const iv=_cryptoJs.default.enc.Hex.parse(secretKeyBytes.toString().slice(0,32));const key=_cryptoJs.default.enc.Hex.parse(secretKeyBytes.toString().slice(32,96));let encrypted;if(isNotString(data)){encrypted=_cryptoJs.default.AES.encrypt(JSON.stringify(data),key,{iv:iv}).toString()}else encrypted=_cryptoJs.default.AES.encrypt(data,key,{iv:iv}).toString();const digest=await addSignature(passphrase,encrypted);return`${encrypted}::${digest}`}async function decrypt(data,passphrase,salt,typeHint="string"){const secretKeyBytes=await createBytesKey(passphrase,salt);const endEqIdx=data.indexOf("::");const digest=data.substring(endEqIdx).replace("::","");const encdata=data.substring(0,endEqIdx);const isAuthentic=await checkSignature(digest,passphrase,encdata);if(!isAuthentic){throw new Error("HMAC digest did not compute as authentic.")}const iv=_cryptoJs.default.enc.Hex.parse(secretKeyBytes.toString().slice(0,32));const key=_cryptoJs.default.enc.Hex.parse(secretKeyBytes.toString().slice(32,96));if(typeHint!=="string"){return JSON.parse(_cryptoJs.default.AES.decrypt(encdata,key,{iv:iv}).toString(_cryptoJs.default.enc.Utf8))}else{return _cryptoJs.default.AES.decrypt(encdata,key,{iv:iv}).toString(_cryptoJs.default.enc.Utf8)}}async function createBytesKey(passphrase,salt,iterations=128){return _cryptoJs.default.PBKDF2(passphrase,salt,{keySize:48,iterations:iterations})}function isNotString(data){return typeof data!=="string"}async function addSignature(key,data){return _cryptoJs.default.HmacSHA256(data,key).toString(_cryptoJs.default.enc.Hex)}async function checkSignature(signedString,key,data){const digestToCompare=await addSignature(key,data);return digestToCompare===signedString}